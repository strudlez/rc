set nocompatible
filetype off " Need to turn off filetype during vundle step.

" Vundle
set rtp+=~/.vim/bundle/vundle/

call vundle#rc()
Bundle 'gmarik/vundle'

Bundle 'kien/ctrlp.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Bundle 'vim-scripts/taglist.vim'
Bundle 'scrooloose/syntastic'
Bundle 'airblade/vim-gitgutter'
Bundle 'tpope/vim-obsession'
Bundle 'chrisbra/vim-diff-enhanced'
Bundle 'vim-scripts/DirDiff.vim'
Bundle 'rking/ag.vim'
Bundle 'Shougo/vimproc.vim'
Bundle 'jiangmiao/auto-pairs'

" Language support
Bundle 'lukerandall/haskellmode-vim'
Bundle 'eagletmt/ghcmod-vim'
Bundle 'eagletmt/neco-ghc'
Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-rails'
Bundle 'scala/scala-dist', {'rtp': 'tool-support/src/vim'}
Bundle 'vim-scripts/VimClojure'
Bundle 'tmhedberg/matchit'
Bundle 'groenewege/vim-less'
Bundle 'lepture/vim-velocity'
Bundle 'hdima/python-syntax'
Bundle 'tfnico/vim-gradle'
Bundle 'burnettk/vim-angular'
Bundle 'pangloss/vim-javascript'
Bundle 'othree/javascript-libraries-syntax.vim'
Bundle 'matthewsimo/angular-vim-snippets'
Bundle 'uarun/vim-protobuf'
Bundle 'google/vim-ft-bzl'
Bundle 'rust-lang/rust.vim'

set t_Co=256
colorscheme bubblegum
"let g:rehash256 = 1
set background=dark

" hide the gui menubar
if has('gui_running')
  set guioptions=egmr
  if has("mac")
    set guifont=Menlo\ for\ Powerline:h11
  else
    set guifont=Menlo\ for\ Powerline\ 10
  endif
endif

set tabstop=2 softtabstop=2 shiftwidth=2 expandtab
set autoindent smartindent cindent

au BufRead,BufNewFile Makefile* setlocal noexpandtab
au BufRead,BufNewFile *.java setlocal tabstop=2 softtabstop=2 shiftwidth=2 textwidth=100
au BufRead,BufNewFile *.vm setlocal tabstop=2 softtabstop=2 shiftwidth=2 textwidth=200
au BufRead,BufNewFile *.rb  setlocal textwidth=100
au BufRead,BufNewFile *.js  setlocal textwidth=80
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType c setlocal omnifunc=ccomplete#Complete

syntax on
filetype plugin indent on

" Fix OSX backspacing
set backspace=indent,eol,start

set spelllang=en_us
set nospell
nmap <silent> <leader>s :set spell!<CR>

" nice searching
set ignorecase
set smartcase

set ruler nu

set showcmd

set hlsearch
set incsearch

set noerrorbells

" Word wrap w/o line breaks
set wrap
set linebreak
set list
set nostartofline

" Nicer autocomplete commands
set wildmode=longest:full
set wildmenu

" Screw backups
set nobackup nowritebackup noswapfile

set colorcolumn=+1
set clipboard=unnamed

set fileformats=unix,dos,mac
scriptencoding utf-8
set encoding=utf-8

set history=10000

" Disable ex mode
nnoremap Q <nop>

" Use and toggle mouse
set mouse=a
function! ToggleMouse()
  if &mouse == 'a'
    set mouse=
    set nonumber
    echo "Mouse usage disabled"
  else
    set mouse=a
    set number
    echo "Mouse usage enabled"
  endif
endfunction

nmap <silent> <leader>c :call ToggleMouse()<CR>

" Make tabs super visible
execute "set listchars=tab:" . nr2char(187) . '\ ,trail:' . nr2char(8226)

" folds!
set foldenable
set foldmethod=indent
set foldnestmax=2
set foldlevel=1
set foldlevelstart=1
set foldminlines=10
set fillchars=vert:\|,fold:\
map <Leader>f zR
" Toggle folds with space
fu! ToggleFold()
   if foldlevel('.') == 0
       normal! l
   else
       if foldclosed('.') < 0
           . foldclose
       else
           . foldopen
       endif
   endif
   echo
endf
noremap <space> :call ToggleFold()<CR>

" Re-highlight after Indent/unindent
vmap < <gv
vmap > >gv

" Show location list
function! GetBufferList()
  redir =>buflist
  silent! ls
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
      echohl ErrorMsg
      echo "Location List is Empty."
      return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction

nmap <silent> <leader>l :call ToggleList("Location List", 'l')<CR>
nmap <silent> <leader>e :call ToggleList("Quickfix List", 'c')<CR>

command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
  " echo a:cmdline
  let expanded_cmdline = a:cmdline
  for part in split(a:cmdline, ' ')
     if part[0] =~ '\v[%#<]'
        let expanded_part = fnameescape(expand(part))
        let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
     endif
  endfor
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  "call setline(1, 'You entered:    ' . a:cmdline)
  "call setline(2, 'Expanded Form:  ' .expanded_cmdline)
  "call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !'. expanded_cmdline
  setlocal nomodifiable
  1
endfunction

" Wrap location jumps
function! WrapCommand(direction, prefix)
  if a:direction == "up"
    try
      execute a:prefix . "previous"
    catch /^Vim\%((\a\+)\)\=:E553/
      execute a:prefix . "last"
    catch /^Vim\%((\a\+)\)\=:E\%(776\|42\):/
    endtry
  elseif a:direction == "down"
    try
      execute a:prefix . "next"
    catch /^Vim\%((\a\+)\)\=:E553/
      execute a:prefix . "first"
    catch /^Vim\%((\a\+)\)\=:E\%(776\|42\):/
    endtry
  endif
endfunction

" <Home> and <End> go up and down the quickfix list and wrap around
nnoremap <silent> [c :call WrapCommand('up', 'c')<CR>
nnoremap <silent> ]c  :call WrapCommand('down', 'c')<CR>

" " <C-Home> and <C-End> go up and down the location list and wrap around
nnoremap <silent> [l :call WrapCommand('up', 'l')<CR>
nnoremap <silent> ]l :call WrapCommand('down', 'l')<CR>

" Emacs!
imap <C-a> <Esc>I
imap <C-e> <Esc>A

" Maintain cursor position in file
:au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

" ,, Turn off search highlight
nmap ,, :nohlsearch<CR>

" Toggle paste mode
nmap ,p :set invpaste paste?<CR>

" Systastic
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open=1
let g:syntastic_loc_list_height=5
let g:syntastic_always_populate_loc_list=1
let g:syntastic_check_on_wq = 0
" Ignore haskell with syntastic
let g:syntastic_ignore_files = ['\m.*\.hs']
" Rust setup
let g:syntastic_rust_checkers = ['rustc']
map <Leader><Tab> :Errors<CR>

" eclim stuff
map <Leader>d <ESC>:JavaSearch -p <C-R><C-W> -x declarations<CR>
map <Leader>i <ESC>:JavaSearch -p <C-R><C-W> -x implementations<CR>
map <Leader>r <ESC>:JavaSearch -p <C-R><C-W> -x references<CR>
map <Leader>j <ESC>:JavaSearchContext<CR>
map <Leader>p <ESC>:JavaDocPreview<CR>

map <Leader>D <ESC>:JavaSearch -x declarations -p
map <Leader>I <ESC>:JavaSearch -x implementations -p
map <Leader>R <ESC>:JavaSearch -x references -p

map ; <ESC>:JavaCorrect<CR>
map <Leader>; <ESC>:lfirst<CR>:JavaCorrect<CR>

" Fix imports
nmap ,i :JavaImportOrganize<CR>

let g:EclimCompletionMethod = 'omnifunc'

" CtrlP
map <Leader>b <ESC>:CtrlPBuffer<CR>
map <Leader><Space> <ESC>:CtrlPMRUFiles<CR>
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*.o,*.so,*.swp,*.zip,*.jar,*.class,*.pdf,*.gif,*.png,*.jpg,*.o,*.hi,*.pyc
let g:ctrlp_custom_ignore = '\v[\/](_build|(\.(git|hg|svn)))$'
let g:ctrlp_max_depth = 20
let g:ctrlp_max_files = 0
if executable("ag")
  set grepprg=ag\ --nogroup\ --nocolor
endif

" Airline
set laststatus=2   " Always show the statusline
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
let g:airline_powerline_fonts=1
let g:airline_theme='dark'
let g:airline_mode_map = {
  \ '__' : '-',
  \ 'n'  : 'N',
  \ 'i'  : 'I',
  \ 'R'  : 'R',
  \ 'v'  : 'V',
  \ 'V'  : 'V-L',
  \ 'c'  : 'C',
  \ '' : 'V-B',
  \ 's'  : 'S',
  \ 'S'  : 'S-L',
  \ '' : 'S-B',
  \ }

let g:airline_section_x = airline#section#create_right([''])
let g:airline_section_z = airline#section#create(['%c'])

" Goto
nnoremap <Leader>] :YcmCompleter GoTo<CR>

let g:ycm_rust_src_path = '/usr/local/rust/src'

" Taglist
map <silent> <Leader>t :TlistToggle<CR>

let g:haddock_browser="o"

autocmd BufWritePost *.hs GhcModCheckAndLintAsync

if filereadable($WORK_RCDIR . "/vim.rc")
  source $WORK_RCDIR/vim.rc
else
  Bundle 'Valloric/YouCompleteMe'
  Bundle 'Rip-Rip/clang_complete'
end

if filereadable($HOME . "/.vimrc.local")
  source $HOME/.vimrc.local
end
